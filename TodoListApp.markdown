# Тестовое задание: To-Do List на Vue 3 с акцентом на UX

## Описание

Создайте приложение на **Vue 3** с использованием **Vite** в качестве сборщика. Приложение представляет собой список задач (To-Do List) с базовыми функциями CRUD (создание, чтение, обновление, удаление). Задание должно продемонстрировать навыки работы с **Composition API**, реактивностью, взаимодействием компонентов, базовой асинхронностью и вниманием к **удобству использования (UX)**, включая адаптивность и управление с клавиатуры. Дизайн должен быть **лаконичным и приятным** для пользователя.

## Требования к приложению

### Функциональность

1. Пользователь может:
   - Добавить задачу через поле ввода и кнопку "Добавить".
   - Отмечать задачу как выполненную с помощью чекбокса.
   - Удалять задачу с помощью кнопки "Удалить".
   - Фильтровать задачи по статусу: "Все", "Выполненные", "Невыполненные".
2. Сохраняйте задачи в `localStorage`, чтобы они сохранялись после перезагрузки страницы.
3. Добавьте имитацию асинхронного запроса при добавлении задачи (например, с помощью `setTimeout` на 500 мс) с отображением состояния загрузки (например, спиннер или текст "Добавление...").
4. Реализуйте анимацию появления задач с помощью Vue `<Transition>` или CSS-транзиций.

### Требования к UX

1. **Адаптивность**:
   - Приложение должно корректно отображаться на десктопных и мобильных устройствах (минимальная ширина — 320px).
   - На мобильных устройствах поле ввода и кнопка "Добавить" должны быть удобными для взаимодействия (например, достаточные размеры и отступы).
   - Список задач должен быть прокручиваемым, если задач много, без нарушения макета.
2. **Управление с клавиатуры**:
   - Пользователь должен иметь возможность добавить задачу, нажав `Enter` в поле ввода.
   - Фокус должен автоматически перемещаться на поле ввода после загрузки страницы.
   - Пользователь может переключаться между фильтрами ("Все", "Выполненные", "Невыполненные") с помощью клавиши `Tab` и выбирать их нажатием `Enter`.
   - Чекбоксы и кнопки удаления должны быть доступны через клавишу `Space` или `Enter`.
3. **Управление мышью**:
   - Кнопки и элементы должны иметь визуальную обратную связь (например, изменение стиля при наведении или клике).
   - На мобильных устройствах элементы должны быть достаточно крупными, чтобы избежать случайных нажатий.
4. **Валидация**:
   - Запретите добавление пустой задачи (отображайте сообщение об ошибке, например, "Введите текст задачи").
   - После успешного добавления задачи очищайте поле ввода.

### Технические требования

1. Используйте **Vue 3 Composition API** (`setup` синтаксис).
2. Реализуйте реактивное состояние для списка задач с помощью `ref` или `reactive`.
3. Разделите приложение минимум на **два компонента**:
   - `App.vue`: основной компонент, содержащий поле ввода, кнопку добавления, фильтр и список задач.
   - `TodoItem.vue`: компонент для отображения отдельной задачи (чекбокс, текст задачи, кнопка удаления).
4. Используйте **props** для передачи данных в `TodoItem.vue` и **emits** для обработки событий (например, удаление или обновление статуса задачи).
5. Стили должны быть написаны с использованием **CSS** (можно использовать SCSS, если знакомы). Дизайн должен быть **лаконичным и приятным**, обеспечивая удобство использования.
6. Используйте **Vite** для сборки проекта.
7. Код должен быть чистым, с понятной структурой и комментариями.

### Дополнительно (опционально)

1. Реализуйте поведение [**Slidable List Tile**](https://i0.wp.com/flutterawesome.com/content/images/2018/09/flutter_slidable.gif?resize=650,400) для компонента `TodoItem.vue`:
   - На мобильных устройствах свайп влево или вправо по задаче показывает дополнительные действия (например, кнопки "Удалить" или "Редактировать").
   - Пример: Slidable List Tile.
   - Используйте события касания (`touchstart`, `touchmove`, `touchend`). Желательно реализовать это поведение в отдельном компоненте для переиспользования.
2. Добавьте кнопку "Очистить все задачи" с подтверждением действия (например, через `window.confirm`).
3. Реализуйте возможность редактировать задачу по двойному клику на текст задачи (используйте `v-model` в `TodoItem.vue`).

### Критерии оценки

- Корректная работа функциональности (CRUD, фильтрация, сохранение в `localStorage`, асинхронность).
- Правильное использование **Composition API** и реактивности (`ref`, `reactive`).
- Корректное взаимодействие между компонентами через **props** и **emits**.
- Качество UX: адаптивность, удобство управления с клавиатуры и мыши, валидация.
- Лаконичный и приятный дизайн, демонстрирующий понимание хорошего UX.
- Чистота и читаемость кода.
- (Опционально) Реализация Slidable List Tile и других дополнительных функций, включая разделение логики свайпа в отдельный компонент.

### Примерная структура проекта

```
/src
  /components
    TodoItem.vue
  App.vue
  main.js
  style.css
```

*Примечание*: Указанная структура не является обязательной. Вы можете организовать проект по своему усмотрению, добавив дополнительные компоненты (например, для реализации Slidable List Tile), если это улучшит архитектуру.

### Примерный интерфейс

- **Десктоп**:
  - Поле ввода и кнопка "Добавить" вверху.
  - Выпадающий список или радиокнопки для фильтрации.
  - Список задач в виде карточек или строк с чекбоксами и кнопками удаления.
- **Мобильный**:
  - Поле ввода и кнопка занимают всю ширину экрана.
  - Фильтры отображаются как кнопки или выпадающий список.
  - Список задач прокручивается вертикально.
  - (Опционально) Свайп по задаче показывает действия (например, "Удалить").
- Анимация появления задач на ваше усмотрение, но она должна быть плавной и ненавязчивой.